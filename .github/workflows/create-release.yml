name: Create release

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Name of branch thats triggered it'
        required: true
        type: string
  pull_request:
    branches:
      - 'release'
    types:
      - closed

jobs:
  define_branch_name:
    name: Define branch name
    runs-on: ubuntu-latest
    outputs:
      branchName: ${{ steps.getBranchName.outputs.branchName }}
    steps:
      - name: Get branch name
        id: getBranchName
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "branchName=${{ inputs.branch_name }}" >> $GITHUB_OUTPUT
          else
            echo "branchName=${{ github.ref }}" >> $GITHUB_OUTPUT
          fi
  calculate_version:
    name: Calculate Version
    runs-on: ubuntu-latest
    needs: [define_branch_name]
    outputs:
      releaseVersion: ${{ steps.gitversion.outputs.majorMinorPatch }}
    steps:
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - uses: actions/setup-dotnet@v2

      - name: Determine Version
        id: gitversion
        run: |
          echo "majorMinorPatch=$(dotnet-gitversion /nonormalize /output json /showvariable MajorMinorPatch)" >> $GITHUB_OUTPUT

      - name: Delete release candidate branch
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git checkout release
          git branch -d ${{ github.head_ref }}
          git push origin --delete ${{ github.head_ref }}
  increase_version:
    name: Increase version
    runs-on: ubuntu-latest
    needs: [calculate_version, define_branch_name]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.define_branch_name.outputs.branchName }}

      - name: Increase package json version
        uses: jossef/action-set-json-field@v2.1
        with:
          file: package.json
          field: version
          value: ${{ needs.calculate_version.outputs.releaseVersion }}

      - name: Commit updated version
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update version to ${{ needs.calculate_version.outputs.releaseVersion }}

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [define_branch_name, calculate_version, increase_version]

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.define_branch_name.outputs.branchName }}
          fetch-depth: 0

      - name: Check if tag exists
        id: tagexists
        uses: actions/github-script@v6
        with:
          script: |
            try {
              github.rest.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "v${{ needs.calculate_version.outputs.releaseVersion }}",
              });

              return true
            } catch {
              return false
            }

      - name: Get result
        run: echo "${{steps.tagexists.outputs.result}}"

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: "Release v${{ needs.calculate_version.outputs.releaseVersion }}",
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: "v${{ needs.calculate_version.outputs.releaseVersion }}",
              target_commitish: "release"
            })

      - name: Update development branch
        run: |
          git fetch
          git checkout ${{ needs.define_branch_name.outputs.branchName }}
          git pull
          git checkout development
          git pull
          git rebase ${{ needs.define_branch_name.outputs.branchName }}
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}.git/
          git push origin development

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Trigger deploy release
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run deploy-release.yml

